name: Build

on: workflow_dispatch

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    name: Build on ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: "ubuntu-20.04" }
          - { os: "windows-2022" }
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "true"
      - name: Read branch file
        id: getbranch
        shell: bash
        run: echo "branch=$(cat branch)" >> $GITHUB_OUTPUT
      - name: Build
        shell: bash
        run: |
          ${{ matrix.config.os == 'ubuntu-20.04' && './build-linux.sh' || '' }} ${{ matrix.config.os == 'windows-2022' && './build-windows.sh' || '' }}
      - name: List build
        shell: bash
        run: |
          ls PhysX/physx/bin

      - name: Create Linux artifacts
        if: matrix.config.os == 'ubuntu-20.04'
        shell: bash
        working-directory: ./PhysX/physx
        run: |
          zip -r ../../physx.linux.release.zip include bin/linux.clang/release -x "**/*.so"
          zip -r ../../physx.linux.checked.zip include bin/linux.clang/checked -x "**/*.so"
          zip -j ../../physx.linux.so.zip bin/linux.clang/release/*.so
      - name: Create Windows artifacts
        if: matrix.config.os == 'windows-2022'
        shell: bash
        working-directory: ./PhysX/physx
        run: |
          7z a ../../physx.windows.release.zip include bin/win.x86_64.vc143.mt/release "-x!bin/win.x86_64.vc143.mt/release/*.dll"
          cd bin/win.x86_64.vc143.mt/release/
          7z a ../../../../../physx.windows.dll.zip *.dll

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.getbranch.outputs.branch }}
          tag_name: ${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload Linux artifacts
        if: matrix.config.os == 'ubuntu-20.04'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./physx.linux.release.zip
          asset_name: physx.linux.release.zip
          asset_content_type: application/zip
      - name: Upload Linux artifacts
        if: matrix.config.os == 'ubuntu-20.04'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./physx.linux.checked.zip
          asset_name: physx.linux.checked.zip
          asset_content_type: application/zip
      - name: Upload Linux artifacts
        if: matrix.config.os == 'ubuntu-20.04'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./physx.linux.so.zip
          asset_name: physx.linux.so.zip
          asset_content_type: application/zip

      - name: Upload Windows artifacts
        if: matrix.config.os == 'windows-2022'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./physx.windows.release.zip
          asset_name: physx.windows.release.zip
          asset_content_type: application/zip
      - name: Upload Windows artifacts
        if: matrix.config.os == 'windows-2022'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./physx.windows.dll.zip
          asset_name: physx.windows.dll.zip
          asset_content_type: application/zip
