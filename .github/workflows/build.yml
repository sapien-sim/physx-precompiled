name: Build

on: workflow_dispatch

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    name: Build on ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: "ubuntu-20.04" }
          - { os: "windows-2022" }
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "true"
      - name: Build
        shell: bash
        run: |
          ${{ matrix.config.os == 'ubuntu-20.04' && './build-linux.sh' || '' }} ${{ matrix.config.os == 'windows-2022' && './build-windows.sh' || '' }}
      - name: List build
        shell: bash
        run: |
          ls PhysX/physx/bin

      - name: Upload Linux release
        if: matrix.config.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-release
          path: |
            PhysX/physx/include
            PhysX/physx/bin/linux.clang/release
            !**/*.so
      - name: Upload Linux checked
        if: matrix.config.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-checked
          path: |
            PhysX/physx/include
            PhysX/physx/bin/linux.clang/checked
            !**/*.so
      - name: Upload Windows release
        if: matrix.config.os == 'windows-2022'
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: |
            PhysX/physx/include
            PhysX/physx/bin/win.x86_64.vc143.mt/release
            !**/*.dll
      - name: Upload Linux so
        if: matrix.config.os == 'ubuntu-20.04'
        uses: actions/upload-artifact@v4
        with:
          name: linux-so
          path: |
            PhysX/physx/bin/linux.clang/release/*.so
            !*freeglut*
      - name: Upload Windows dll
        if: matrix.config.os == 'windows-2022'
        uses: actions/upload-artifact@v4
        with:
          name: windows-dll
          path: |
            PhysX/physx/bin/win.x86_64.vc143.mt/release/*.dll
            !*freeglut*

  release:
    name: Create Github Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v2
      - name: Read branch file
        id: getbranch
        shell: bash
        run: echo "branch=$(cat branch)" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: ${{ steps.getbranch.outputs.branch }}
          tag_name: ${{ steps.getbranch.outputs.branch }}
          draft: false
          prerelease: false
      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v4
        with:
          name: release_url
          path: release_url.txt

  publish:
    needs: [build, release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        file: [linux-release, linux-checked, windows-release, linux-so, windows-dll]
    steps:
    - uses: actions/checkout@v2

    - name: Download release url
      uses: actions/download-artifact@v4
      with:
        name: release_url
        path: release_url

    - name: Download release artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.file }}
        path: ${{ matrix.file }}

    - name: Read release url
      id: get_release
      run: |
        echo "upload_url=$(cat release_url/release_url.txt)" >> $GITHUB_OUTPUT

    - name: Zip release asset
      working-directory: ${{ matrix.file }}
      run: |
        zip -r ../${{ matrix.file }}.zip *

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./${{ matrix.rid }}.zip
        asset_name: ${{ matrix.file }}.zip
        asset_content_type: application/zip
